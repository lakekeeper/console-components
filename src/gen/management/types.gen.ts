// This file is auto-generated by @hey-api/openapi-ts

export type AdlsProfile = {
    /**
     * Name of the azure storage account.
     */
    'account-name': string;
    /**
     * Allow alternative protocols such as `wasbs://` in locations.
     * This is disabled by default. We do not recommend to use this setting
     * except for migration of old tables via the register endpoint.
     */
    'allow-alternative-protocols'?: boolean;
    /**
     * The authority host to use for authentication. Default: `https://login.microsoftonline.com`.
     */
    'authority-host'?: string | null;
    /**
     * Name of the adls filesystem, in blobstorage also known as container.
     */
    filesystem: string;
    /**
     * The host to use for the storage account. Default: `dfs.core.windows.net`.
     */
    host?: string | null;
    /**
     * Subpath in the filesystem to use.
     */
    'key-prefix'?: string | null;
    /**
     * The validity of the sas token in seconds. Default: 3600.
     */
    'sas-token-validity-seconds'?: number | null;
};

export type AuthZBackend = 'allow-all' | 'openfga';

export type AzCredential = {
    'client-id': string;
    'client-secret': string;
    'credential-type': 'client-credentials';
    'tenant-id': string;
} | {
    'credential-type': 'shared-access-key';
    key: string;
} | {
    'credential-type': 'azure-system-identity';
};

export type BootstrapRequest = {
    /**
     * Set to true if you accept LAKEKEEPER terms of use.
     */
    'accept-terms-of-use': boolean;
    /**
     * If set to true, the calling user is treated as an operator and obtain
     * a corresponding role. If not specified, the user is treated as a human.
     */
    'is-operator'?: boolean;
    /**
     * Email of the user performing bootstrap. Optional. If not provided
     * the server will try to parse the email from the provided token.
     */
    'user-email'?: string | null;
    /**
     * Name of the user performing bootstrap. Optional. If not provided
     * the server will try to parse the name from the provided token.
     * The initial user will become the global admin.
     */
    'user-name'?: string | null;
    'user-type'?: null | UserType;
};

/**
 * Represents an action on an object
 */
export type CheckOperation = {
    server: {
        action: ServerAction;
    };
} | {
    project: {
        action: ProjectAction;
        'project-id'?: string | null;
    };
} | {
    warehouse: {
        action: WarehouseAction;
        'warehouse-id': string;
    };
} | {
    namespace: NamespaceIdentOrUuid & {
        action: NamespaceAction;
    };
} | {
    table: TabularIdentOrUuid & {
        action: TableAction;
    };
} | {
    view: TabularIdentOrUuid & {
        action: ViewAction;
    };
};

/**
 * Check if a specific action is allowed on the given object
 */
export type CheckRequest = {
    identity?: null | UserOrRole;
    /**
     * The operation to check.
     */
    operation: CheckOperation;
};

export type CheckResponse = {
    /**
     * Whether the action is allowed.
     */
    allowed: boolean;
};

export type CreateProjectRequest = {
    /**
     * Request a specific project ID - optional.
     * If not provided, a new project ID will be generated (recommended).
     */
    'project-id'?: string | null;
    /**
     * Name of the project to create.
     */
    'project-name': string;
};

export type CreateProjectResponse = {
    /**
     * ID of the created project.
     */
    'project-id': string;
};

export type CreateRoleRequest = {
    /**
     * Description of the role
     */
    description?: string | null;
    /**
     * Name of the role to create
     */
    name: string;
    /**
     * Project ID in which the role is created.
     * Deprecated: Please use the `x-project-id` header instead.
     */
    'project-id'?: string | null;
};

export type CreateUserRequest = {
    /**
     * Email of the user. If id is not specified, the email is extracted
     * from the provided token.
     */
    email?: string | null;
    /**
     * Subject id of the user - allows user provisioning.
     * The id must be identical to the subject in JWT tokens, prefixed
     * with `<idp-identifier>~`. For example: `oidc~1234567890` for OIDC users
     * or `kubernetes~1234567890` for Kubernetes users.
     * To create users in self-service manner, do not set the id.
     * The id is then extracted from the passed JWT token.
     */
    id?: string | null;
    /**
     * Name of the user. If id is not specified, the name is extracted
     * from the provided token.
     */
    name?: string | null;
    /**
     * Update the user if it already exists
     * Default: false
     */
    'update-if-exists'?: boolean;
    'user-type'?: null | UserType;
};

export type CreateWarehouseRequest = {
    /**
     * Profile to determine behavior upon dropping of tabulars, defaults to soft-deletion with
     * 7 days expiration.
     */
    'delete-profile'?: TabularDeleteProfile;
    /**
     * Project ID in which to create the warehouse.
     * Deprecated: Please use the `x-project-id` header instead.
     */
    'project-id'?: string | null;
    'storage-credential'?: null | StorageCredential;
    /**
     * Storage profile to use for the warehouse.
     */
    'storage-profile': StorageProfile;
    /**
     * Name of the warehouse to create. Must be unique
     * within a project and may not contain "/"
     */
    'warehouse-name': string;
};

export type CreateWarehouseResponse = {
    /**
     * ID of the created warehouse.
     */
    'warehouse-id': string;
};

export type DeletedTabularResponse = {
    /**
     * Date when the tabular was created
     */
    'created-at': string;
    /**
     * Date when the tabular was deleted
     */
    'deleted-at': string;
    /**
     * Date when the tabular will not be recoverable anymore
     */
    'expiration-date': string;
    /**
     * Unique identifier of the tabular
     */
    id: string;
    /**
     * Name of the tabular
     */
    name: string;
    /**
     * List of namespace parts the tabular belongs to
     */
    namespace: Array<string>;
    /**
     * Type of the tabular
     */
    typ: TabularType;
    /**
     * Warehouse ID where the tabular is stored
     */
    'warehouse-id': string;
};

export type EndpointStatistic = {
    /**
     * Number of requests to this endpoint for the current time-slice.
     */
    count: number;
    /**
     * Timestamp at which the datapoint was created in the database.
     *
     * This is the exact time at which the current endpoint-status-warehouse combination was called
     * for the first time in the current time-slice.
     */
    'created-at': string;
    /**
     * The route of the endpoint.
     *
     * Format: `METHOD /path/to/endpoint`
     */
    'http-route': string;
    /**
     * The status code of the response.
     */
    'status-code': number;
    /**
     * Timestamp at which the datapoint was last updated.
     *
     * This is the exact time at which the current datapoint was last updated.
     */
    'updated-at'?: string | null;
    /**
     * The ID of the warehouse that handled the request.
     *
     * Only present for requests that could be associated with a warehouse. Some management
     * endpoints cannot be associated with a warehouse, e.g. warehouse creation or user management
     * will not have a `warehouse-id`.
     */
    'warehouse-id'?: string | null;
    /**
     * The name of the warehouse that handled the request.
     *
     * Only present for requests that could be associated with a warehouse. Some management
     * endpoints cannot be associated with a warehouse, e.g. warehouse creation or user management
     * will not have a `warehouse-id`
     */
    'warehouse-name'?: string | null;
};

export type EndpointStatisticsResponse = {
    /**
     * Array of arrays of statistics detailing each called endpoint for each `timestamp`.
     *
     * See docs of `timestamps` for more details.
     */
    'called-endpoints': Array<Array<EndpointStatistic>>;
    /**
     * Token to get the next page of results.
     *
     * Inverse of `previous-page-token`, see its documentation above.
     */
    'next-page-token': string;
    /**
     * Token to get the previous page of results.
     *
     * Endpoint statistics are not paginated through page-limits, we paginate them by stepping
     * through time. By default, the list-statistics endpoint will return all statistics for
     * `now()` - 1 day to `now()`. In the request, you can specify a `range_specifier` to set the end
     * date and step interval. The `previous-page-token` will then move to the neighboring window.
     * E.g. in the default case of `now()` and 1 day, it'd be `now()` - 2 days to `now()` - 1 day.
     */
    'previous-page-token': string;
    /**
     * Array of timestamps indicating the time at which each entry in the `called_endpoints` array
     * is valid.
     *
     * We lazily create a new statistics entry every hour, in between hours, the existing entry
     * is being updated. If any endpoint is called in the following hour, there'll be an entry in
     * `timestamps` for the following hour. If not, then there'll be no entry.
     */
    timestamps: Array<string>;
};

/**
 * JSON error payload returned in a response with further details on the error
 */
export type ErrorModel = {
    /**
     * HTTP response code
     */
    code: number;
    /**
     * Human-readable error message
     */
    message: string;
    stack?: Array<string>;
    /**
     * Internal type definition of the error
     */
    type: string;
};

/**
 * Warehouse-specific configuration for the expiration queue.
 */
export type ExpirationQueueConfig = {
    [key: string]: unknown;
};

/**
 * GCS Credentials
 *
 * Currently only supports Service Account Key
 * Example of a key:
 * ```json
 * {
 * "type": "service_account",
 * "project_id": "example-project-1234",
 * "private_key_id": "....",
 * "private_key": "-----BEGIN PRIVATE KEY-----\n.....\n-----END PRIVATE KEY-----\n",
 * "client_email": "abc@example-project-1234.iam.gserviceaccount.com",
 * "client_id": "123456789012345678901",
 * "auth_uri": "https://accounts.google.com/o/oauth2/auth",
 * "token_uri": "https://oauth2.googleapis.com/token",
 * "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
 * "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/abc%example-project-1234.iam.gserviceaccount.com",
 * "universe_domain": "googleapis.com"
 * }
 * ```
 */
export type GcsCredential = {
    'credential-type': 'service-account-key';
    key: GcsServiceKey;
} | {
    'credential-type': 'gcp-system-identity';
};

export type GcsProfile = {
    /**
     * Name of the GCS bucket
     */
    bucket: string;
    /**
     * Subpath in the bucket to use.
     */
    'key-prefix'?: string | null;
};

export type GcsServiceKey = {
    auth_provider_x509_cert_url: string;
    auth_uri: string;
    client_email: string;
    client_id: string;
    client_x509_cert_url: string;
    private_key: string;
    private_key_id: string;
    project_id: string;
    token_uri: string;
    type: string;
    universe_domain: string;
};

export type GetEndpointStatisticsRequest = {
    'range-specifier'?: null | TimeWindowSelector;
    /**
     * Status code filter
     *
     * Optional filter to only return statistics for requests with specific status codes.
     */
    'status-codes'?: Array<number> | null;
    /**
     * Warehouse filter
     *
     * Can return statistics for a specific warehouse, all warehouses or requests that could not be
     * associated to any warehouse.
     */
    warehouse: WarehouseFilter;
};

export type GetNamespaceAccessResponse = {
    'allowed-actions': Array<NamespaceAction>;
};

export type GetNamespaceAssignmentsResponse = {
    assignments: Array<NamespaceAssignment>;
};

export type GetNamespaceAuthPropertiesResponse = {
    'managed-access': boolean;
    'managed-access-inherited': boolean;
};

export type GetProjectAccessResponse = {
    'allowed-actions': Array<ProjectAction>;
};

export type GetProjectAssignmentsResponse = {
    assignments: Array<ProjectAssignment>;
    'project-id': string;
};

export type GetProjectResponse = {
    /**
     * ID of the project.
     */
    'project-id': string;
    /**
     * Name of the project
     */
    'project-name': string;
};

export type GetRoleAccessResponse = {
    'allowed-actions': Array<RoleAction>;
};

export type GetRoleAssignmentsResponse = {
    assignments: Array<RoleAssignment>;
};

export type GetServerAccessResponse = {
    'allowed-actions': Array<ServerAction>;
};

export type GetServerAssignmentsResponse = {
    assignments: Array<ServerAssignment>;
};

export type GetTableAccessResponse = {
    'allowed-actions': Array<TableAction>;
};

export type GetTableAssignmentsResponse = {
    assignments: Array<TableAssignment>;
};

export type GetTaskQueueConfigResponse = {
    'max-seconds-since-last-heartbeat'?: number | null;
    'queue-config': QueueConfigResponse;
};

export type GetViewAccessResponse = {
    'allowed-actions': Array<ViewAction>;
};

export type GetViewAssignmentsResponse = {
    assignments: Array<ViewAssignment>;
};

export type GetWarehouseAccessResponse = {
    'allowed-actions': Array<WarehouseAction>;
};

export type GetWarehouseAssignmentsResponse = {
    assignments: Array<WarehouseAssignment>;
};

export type GetWarehouseAuthPropertiesResponse = {
    'managed-access': boolean;
};

export type GetWarehouseResponse = {
    /**
     * Delete profile used for the warehouse.
     */
    'delete-profile': TabularDeleteProfile;
    /**
     * ID of the warehouse.
     */
    id: string;
    /**
     * Name of the warehouse.
     */
    name: string;
    /**
     * Project ID in which the warehouse was created.
     */
    'project-id': string;
    /**
     * Whether the warehouse is protected from being deleted.
     */
    protected: boolean;
    /**
     * Whether the warehouse is active.
     */
    status: WarehouseStatus;
    /**
     * Storage profile used for the warehouse.
     */
    'storage-profile': StorageProfile;
};

/**
 * JSON wrapper for all error responses (non-2xx)
 */
export type IcebergErrorResponse = {
    error: ErrorModel;
};

export type ListDeletedTabularsResponse = {
    /**
     * Token to fetch the next page
     */
    'next-page-token'?: string | null;
    /**
     * List of tabulars
     */
    tabulars: Array<DeletedTabularResponse>;
};

export type ListProjectsResponse = {
    /**
     * List of projects
     */
    projects: Array<GetProjectResponse>;
};

export type ListRolesResponse = {
    'next-page-token'?: string | null;
    roles: Array<Role>;
};

export type ListUsersResponse = {
    'next-page-token'?: string | null;
    users: Array<User>;
};

export type ListWarehousesResponse = {
    /**
     * List of warehouses in the project.
     */
    warehouses: Array<GetWarehouseResponse>;
};

export type NamespaceAction = 'create_table' | 'create_view' | 'create_namespace' | 'delete' | 'update_properties' | 'get_metadata' | 'read_assignments' | 'grant_create' | 'grant_describe' | 'grant_modify' | 'grant_select' | 'grant_pass_grants' | 'grant_manage_grants';

export type NamespaceAssignment = (UserOrRole & {
    type: 'ownership';
}) | (UserOrRole & {
    type: 'pass_grants';
}) | (UserOrRole & {
    type: 'manage_grants';
}) | (UserOrRole & {
    type: 'describe';
}) | (UserOrRole & {
    type: 'select';
}) | (UserOrRole & {
    type: 'create';
}) | (UserOrRole & {
    type: 'modify';
});

/**
 * Identifier for a namespace, either a UUID or its name and warehouse ID
 */
export type NamespaceIdentOrUuid = {
    'namespace-id': string;
} | {
    namespace: Array<string>;
    'warehouse-id': string;
};

export type NamespaceRelation = 'ownership' | 'pass_grants' | 'manage_grants' | 'describe' | 'select' | 'create' | 'modify';

export type ProjectAction = 'create_warehouse' | 'delete' | 'rename' | 'list_warehouses' | 'create_role' | 'list_roles' | 'search_roles' | 'read_assignments' | 'grant_role_creator' | 'grant_create' | 'grant_describe' | 'grant_modify' | 'grant_select' | 'grant_project_admin' | 'grant_security_admin' | 'grant_data_admin';

export type ProjectAssignment = (UserOrRole & {
    type: 'project_admin';
}) | (UserOrRole & {
    type: 'security_admin';
}) | (UserOrRole & {
    type: 'data_admin';
}) | (UserOrRole & {
    type: 'role_creator';
}) | (UserOrRole & {
    type: 'describe';
}) | (UserOrRole & {
    type: 'select';
}) | (UserOrRole & {
    type: 'create';
}) | (UserOrRole & {
    type: 'modify';
});

export type ProjectRelation = 'project_admin' | 'security_admin' | 'data_admin' | 'role_creator' | 'describe' | 'select' | 'create' | 'modify';

export type ProtectionResponse = {
    /**
     * Indicates whether the entity is protected
     */
    protected: boolean;
    /**
     * Updated at
     */
    updated_at?: string | null;
};

export type PurgeQueueConfig = {
    [key: string]: unknown;
};

export type QueueConfig = unknown;

export type QueueConfigResponse = unknown & {
    'queue-name': string;
};

export type RenameProjectRequest = {
    /**
     * New name for the project.
     */
    'new-name': string;
};

export type RenameWarehouseRequest = {
    /**
     * New name for the warehouse.
     */
    'new-name': string;
};

export type Role = {
    /**
     * Timestamp when the role was created
     */
    'created-at': string;
    /**
     * Description of the role
     */
    description?: string | null;
    /**
     * Globally unique id of this role
     */
    id: string;
    /**
     * Name of the role
     */
    name: string;
    /**
     * Project ID in which the role is created.
     */
    'project-id': string;
    /**
     * Timestamp when the role was last updated
     */
    'updated-at'?: string | null;
};

export type RoleAction = 'assume' | 'can_grant_assignee' | 'can_change_ownership' | 'delete' | 'update' | 'read' | 'read_assignments';

export type RoleAssignment = (UserOrRole & {
    type: 'assignee';
}) | (UserOrRole & {
    type: 'ownership';
});

export type RoleRelation = 'assignee' | 'ownership';

/**
 * S3CredentialAccessKey
 */
export type S3AccessKeyCredential = {
    'aws-access-key-id': string;
    'aws-secret-access-key': string;
    'external-id'?: string | null;
};

/**
 * S3CredentialSystemIdentity
 */
export type S3AwsSystemIdentityCredential = {
    'external-id'?: string | null;
};

/**
 * CloudflareR2Credential
 */
export type S3CloudflareR2Credential = {
    /**
     * Access key ID used for IO operations of Lakekeeper
     */
    'access-key-id': string;
    /**
     * Cloudflare account ID, used to determine the temporary credentials endpoint.
     */
    'account-id': string;
    /**
     * Secret key associated with the access key ID.
     */
    'secret-access-key': string;
    /**
     * Token associated with the access key ID.
     * This is used to fetch downscoped temporary credentials for vended credentials.
     */
    token: string;
};

export type S3Credential = (S3AccessKeyCredential & {
    'credential-type': 'access-key';
}) | (S3AwsSystemIdentityCredential & {
    'credential-type': 'aws-system-identity';
}) | (S3CloudflareR2Credential & {
    'credential-type': 'cloudflare-r2';
});

export type S3Flavor = 'aws' | 's3-compat';

export type S3Profile = {
    /**
     * Allow `s3a://` and `s3n://` in locations.
     * This is disabled by default. We do not recommend to use this setting
     * except for migration of old hadoop-based tables via the register endpoint.
     * Tables with `s3a` paths are not accessible outside the Java ecosystem.
     */
    'allow-alternative-protocols'?: boolean | null;
    /**
     * Optional ARN to assume when accessing the bucket from Lakekeeper.
     */
    'assume-role-arn'?: string | null;
    /**
     * ARN of the KMS key used to encrypt the S3 bucket, if any.
     */
    'aws-kms-key-arn'?: string | null;
    /**
     * Name of the S3 bucket
     */
    bucket: string;
    /**
     * Optional endpoint to use for S3 requests, if not provided
     * the region will be used to determine the endpoint.
     * If both region and endpoint are provided, the endpoint will be used.
     * Example: `http://s3-de.my-domain.com:9000`
     */
    endpoint?: string | null;
    /**
     * S3 flavor to use.
     * Defaults to AWS
     */
    flavor?: S3Flavor;
    /**
     * Subpath in the bucket to use.
     */
    'key-prefix'?: string | null;
    /**
     * Path style access for S3 requests.
     * If the underlying S3 supports both, we recommend to not set `path_style_access`.
     */
    'path-style-access'?: boolean | null;
    /**
     * Controls whether the `s3.delete-enabled=false` flag is sent to clients.
     *
     * In all Iceberg 1.x versions, when Spark executes `DROP TABLE xxx PURGE`, it directly
     * deletes files from S3, bypassing the catalog's soft-deletion mechanism.
     * Other query engines properly delegate this operation to the catalog.
     * This Spark behavior is expected to change in Iceberg 2.0.
     *
     * Setting this to `true` pushes the `s3.delete-enabled=false` flag to clients,
     * which discourages Spark from directly deleting files during `DROP TABLE xxx PURGE` operations.
     * Note that clients may override this setting, and it affects other Spark operations
     * that require file deletion, such as removing snapshots.
     *
     * For more details, refer to Lakekeeper's
     * [Soft-Deletion documentation](https://docs.lakekeeper.io/docs/nightly/concepts/#soft-deletion).
     * This flag has no effect if Soft-Deletion is disabled for the warehouse.
     */
    'push-s3-delete-disabled'?: boolean;
    /**
     * Region to use for S3 requests.
     */
    region: string;
    /**
     * S3 URL style detection mode for remote signing.
     * One of `auto`, `path-style`, `virtual-host`.
     * Default: `auto`. When set to `auto`, Lakekeeper will first try to parse the URL as
     * `virtual-host` and then attempt `path-style`.
     * `path` assumes the bucket name is the first path segment in the URL. `virtual-host`
     * assumes the bucket name is the first subdomain if it is preceding `.s3` or `.s3-`.
     *
     * Examples
     *
     * Virtual host:
     * - <https://bucket.s3.endpoint.com/bar/a/key>
     * - <https://bucket.s3-eu-central-1.amazonaws.com/file>
     *
     * Path style:
     * - <https://s3.endpoint.com/bucket/bar/a/key>
     * - <https://s3.us-east-1.amazonaws.com/bucket/file>
     */
    'remote-signing-url-style'?: S3UrlStyleDetectionMode;
    'sts-enabled': boolean;
    /**
     * Optional role ARN to assume for sts vended-credentials.
     * If not provided, `assume_role_arn` is used.
     * Either `assume_role_arn` or `sts_role_arn` must be provided if `sts_enabled` is true.
     */
    'sts-role-arn'?: string | null;
    /**
     * The validity of the sts tokens in seconds. Default is 3600
     */
    'sts-token-validity-seconds'?: number;
};

export type S3UrlStyleDetectionMode = 'path' | 'virtual_host' | 'auto';

export type SearchRoleRequest = {
    /**
     * Deprecated: Please use the `x-project-id` header instead.
     * Project ID in which the role is created.
     */
    'project-id'?: string | null;
    /**
     * Search string for fuzzy search.
     * Length is truncated to 64 characters.
     */
    search: string;
};

export type SearchRoleResponse = {
    /**
     * List of users matching the search criteria
     */
    roles: Array<Role>;
};

export type SearchUser = {
    /**
     * Email of the user. If id is not specified, the email is extracted
     * from the provided token.
     */
    email?: string | null;
    /**
     * ID of the user
     */
    id: string;
    /**
     * Name of the user
     */
    name: string;
    /**
     * Type of the user
     */
    'user-type': UserType;
};

export type SearchUserRequest = {
    /**
     * Search string for fuzzy search.
     * Length is truncated to 64 characters.
     */
    search: string;
};

/**
 * Search result for users
 */
export type SearchUserResponse = {
    /**
     * List of users matching the search criteria
     */
    users: Array<SearchUser>;
};

export type ServerAction = 'create_project' | 'update_users' | 'delete_users' | 'list_users' | 'grant_admin' | 'provision_users' | 'read_assignments';

export type ServerAssignment = (UserOrRole & {
    type: 'admin';
}) | (UserOrRole & {
    type: 'operator';
});

export type ServerInfo = {
    /**
     * `AuthZ` backend in use.
     */
    'authz-backend': AuthZBackend;
    /**
     * If using AWS system identities for S3 storage profiles are enabled.
     */
    'aws-system-identities-enabled': boolean;
    /**
     * If using Azure system identities for Azure storage profiles are enabled.
     */
    'azure-system-identities-enabled': boolean;
    /**
     * Whether the catalog has been bootstrapped.
     */
    bootstrapped: boolean;
    /**
     * Default Project ID. Null if not set
     */
    'default-project-id'?: string | null;
    /**
     * If using GCP system identities for GCS storage profiles are enabled.
     */
    'gcp-system-identities-enabled': boolean;
    /**
     * List of queues that are registered for the server.
     */
    queues: Array<string>;
    /**
     * ID of the server.
     */
    'server-id': string;
    /**
     * Version of the server.
     */
    version: string;
};

export type ServerRelation = 'admin' | 'operator';

export type SetManagedAccessRequest = {
    'managed-access': boolean;
};

export type SetProtectionRequest = {
    /**
     * Setting this to `true` will prevent the entity from being deleted unless `force` is used.
     */
    protected: boolean;
};

export type SetTaskQueueConfigRequest = {
    'max-seconds-since-last-heartbeat'?: number | null;
    'queue-config': QueueConfig;
};

/**
 * Storage secret for a warehouse.
 */
export type StorageCredential = (S3Credential & {
    type: 's3';
}) | (AzCredential & {
    type: 'az';
}) | (GcsCredential & {
    type: 'gcs';
});

/**
 * Storage profile for a warehouse.
 */
export type StorageProfile = (AdlsProfile & {
    type: 'adls';
}) | (S3Profile & {
    type: 's3';
}) | (GcsProfile & {
    type: 'gcs';
});

export type TableAction = 'drop' | 'write_data' | 'read_data' | 'get_metadata' | 'commit' | 'rename' | 'read_assignments' | 'grant_pass_grants' | 'grant_manage_grants' | 'grant_describe' | 'grant_select' | 'grant_modify' | 'change_ownership';

export type TableAssignment = (UserOrRole & {
    type: 'ownership';
}) | (UserOrRole & {
    type: 'pass_grants';
}) | (UserOrRole & {
    type: 'manage_grants';
}) | (UserOrRole & {
    type: 'describe';
}) | (UserOrRole & {
    type: 'select';
}) | (UserOrRole & {
    type: 'modify';
});

export type TableRelation = 'ownership' | 'pass_grants' | 'manage_grants' | 'describe' | 'select' | 'modify';

export type TabularDeleteProfile = {
    type: 'hard';
} | {
    'expiration-seconds': number;
    type: 'soft';
};

/**
 * Identifier for a table or view, either a UUID or its name and namespace
 */
export type TabularIdentOrUuid = {
    'table-id': string;
} | {
    namespace: Array<string>;
    /**
     * Name of the table or view
     */
    table: string;
    'warehouse-id': string;
};

export type TabularIdentUuid = {
    id: string;
    type: 'table';
} | {
    id: string;
    type: 'view';
};

/**
 * Type of tabular
 */
export type TabularType = 'table' | 'view';

export type TimeWindowSelector = {
    /**
     * End timestamp of the time window
     * Specify
     */
    end: string;
    /**
     * Duration/span of the time window
     *
     * The returned statistics will be for the time window from `end` - `interval` to `end`.
     * Specify a ISO8601 duration string, e.g. `PT1H` for 1 hour, `P1D` for 1 day.
     */
    interval: string;
    type: 'window';
} | {
    /**
     * Opaque Token from previous response for paginating through time windows
     *
     * Use the `next_page_token` or `previous_page_token` from a previous response
     */
    token: string;
    type: 'page-token';
};

export type UndropTabularsRequest = {
    /**
     * Tabulars to undrop
     */
    targets: Array<TabularIdentUuid>;
};

export type UpdateNamespaceAssignmentsRequest = {
    deletes?: Array<NamespaceAssignment>;
    writes?: Array<NamespaceAssignment>;
};

export type UpdateProjectAssignmentsRequest = {
    deletes?: Array<ProjectAssignment>;
    writes?: Array<ProjectAssignment>;
};

export type UpdateRoleAssignmentsRequest = {
    deletes?: Array<RoleAssignment>;
    writes?: Array<RoleAssignment>;
};

export type UpdateRoleRequest = {
    /**
     * Description of the role. If not set, the description will be removed.
     */
    description?: string | null;
    /**
     * Name of the role to create
     */
    name: string;
};

export type UpdateServerAssignmentsRequest = {
    deletes?: Array<ServerAssignment>;
    writes?: Array<ServerAssignment>;
};

export type UpdateTableAssignmentsRequest = {
    deletes?: Array<TableAssignment>;
    writes?: Array<TableAssignment>;
};

export type UpdateUserRequest = {
    email?: string | null;
    name: string;
    'user-type': UserType;
};

export type UpdateViewAssignmentsRequest = {
    deletes?: Array<ViewAssignment>;
    writes?: Array<ViewAssignment>;
};

export type UpdateWarehouseAssignmentsRequest = {
    deletes?: Array<WarehouseAssignment>;
    writes?: Array<WarehouseAssignment>;
};

export type UpdateWarehouseCredentialRequest = {
    'new-storage-credential'?: null | StorageCredential;
};

export type UpdateWarehouseDeleteProfileRequest = {
    'delete-profile': TabularDeleteProfile;
};

export type UpdateWarehouseStorageRequest = {
    'storage-credential'?: null | StorageCredential;
    /**
     * Storage profile to use for the warehouse.
     * The new profile must point to the same location as the existing profile
     * to avoid data loss. For S3 this means that you may not change the
     * bucket, key prefix, or region.
     */
    'storage-profile': StorageProfile;
};

/**
 * User of the catalog
 */
export type User = {
    /**
     * Timestamp when the user was created
     */
    'created-at': string;
    /**
     * Email of the user
     */
    email?: string | null;
    /**
     * The user's ID
     */
    id: string;
    /**
     * The endpoint that last updated the user
     */
    'last-updated-with': UserLastUpdatedWith;
    /**
     * Name of the user
     */
    name: string;
    /**
     * Timestamp when the user was last updated
     */
    'updated-at'?: string | null;
    /**
     * Type of the user
     */
    'user-type': UserType;
};

/**
 * How the user was last updated
 */
export type UserLastUpdatedWith = 'create-endpoint' | 'config-call-creation' | 'update-endpoint';

/**
 * Identifies a user or a role
 */
export type UserOrRole = {
    /**
     * Id of the user
     */
    user: string;
} | {
    /**
     * Id of the role
     */
    role: string;
};

/**
 * Type of a User
 */
export type UserType = 'human' | 'application';

export type ViewAction = 'drop' | 'commit' | 'get_metadata' | 'rename' | 'read_assignments' | 'grant_pass_grants' | 'grant_manage_grants' | 'grant_describe' | 'grant_modify' | 'change_ownership';

export type ViewAssignment = (UserOrRole & {
    type: 'ownership';
}) | (UserOrRole & {
    type: 'pass_grants';
}) | (UserOrRole & {
    type: 'manage_grants';
}) | (UserOrRole & {
    type: 'describe';
}) | (UserOrRole & {
    type: 'modify';
});

export type ViewRelation = 'ownership' | 'pass_grants' | 'manage_grants' | 'describe' | 'modify';

export type WarehouseAction = 'create_namespace' | 'delete' | 'modify_storage' | 'modify_storage_credential' | 'get_config' | 'get_metadata' | 'list_namespaces' | 'include_in_list' | 'deactivate' | 'activate' | 'rename' | 'list_deleted_tabulars' | 'read_assignments' | 'grant_create' | 'grant_describe' | 'grant_modify' | 'grant_select' | 'grant_pass_grants' | 'grant_manage_grants' | 'change_ownership';

export type WarehouseAssignment = (UserOrRole & {
    type: 'ownership';
}) | (UserOrRole & {
    type: 'pass_grants';
}) | (UserOrRole & {
    type: 'manage_grants';
}) | (UserOrRole & {
    type: 'describe';
}) | (UserOrRole & {
    type: 'select';
}) | (UserOrRole & {
    type: 'create';
}) | (UserOrRole & {
    type: 'modify';
});

export type WarehouseFilter = {
    id: string;
    type: 'warehouse-id';
} | {
    type: 'unmapped';
} | {
    type: 'all';
};

export type WarehouseRelation = 'ownership' | 'pass_grants' | 'manage_grants' | 'describe' | 'select' | 'create' | 'modify';

export type WarehouseStatistics = {
    /**
     * Number of tables in the warehouse.
     */
    'number-of-tables': number;
    /**
     * Number of views in the warehouse.
     */
    'number-of-views': number;
    /**
     * Timestamp of when these statistics are valid until
     *
     * We lazily create a new statistics entry every hour, in between hours, the existing entry
     * is being updated. If there's a change at `created_at` + 1 hour, a new entry is created. If
     * there's no change, no new entry is created.
     */
    timestamp: string;
    /**
     * Timestamp of when these statistics were last updated
     */
    'updated-at': string;
};

export type WarehouseStatisticsResponse = {
    /**
     * Next page token
     */
    'next-page-token'?: string | null;
    /**
     * Ordered list of warehouse statistics.
     */
    stats: Array<WarehouseStatistics>;
    /**
     * ID of the warehouse for which the stats were collected.
     */
    'warehouse-ident': string;
};

/**
 * Status of a warehouse
 */
export type WarehouseStatus = 'active' | 'inactive';

export type BootstrapData = {
    body: BootstrapRequest;
    path?: never;
    query?: never;
    url: '/management/v1/bootstrap';
};

export type BootstrapErrors = {
    /**
     * InternalError
     */
    500: IcebergErrorResponse;
    '4XX': IcebergErrorResponse;
};

export type BootstrapError = BootstrapErrors[keyof BootstrapErrors];

export type BootstrapResponses = {
    /**
     * Server bootstrapped successfully
     */
    204: void;
};

export type BootstrapResponse = BootstrapResponses[keyof BootstrapResponses];

export type DeleteDefaultProjectDeprecatedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/management/v1/default-project';
};

export type DeleteDefaultProjectDeprecatedErrors = {
    '4XX': IcebergErrorResponse;
};

export type DeleteDefaultProjectDeprecatedError = DeleteDefaultProjectDeprecatedErrors[keyof DeleteDefaultProjectDeprecatedErrors];

export type DeleteDefaultProjectDeprecatedResponses = {
    /**
     * Project deleted successfully
     */
    204: void;
};

export type DeleteDefaultProjectDeprecatedResponse = DeleteDefaultProjectDeprecatedResponses[keyof DeleteDefaultProjectDeprecatedResponses];

export type GetDefaultProjectDeprecatedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/management/v1/default-project';
};

export type GetDefaultProjectDeprecatedErrors = {
    '4XX': IcebergErrorResponse;
};

export type GetDefaultProjectDeprecatedError = GetDefaultProjectDeprecatedErrors[keyof GetDefaultProjectDeprecatedErrors];

export type GetDefaultProjectDeprecatedResponses = {
    /**
     * Project details
     */
    200: GetProjectResponse;
};

export type GetDefaultProjectDeprecatedResponse = GetDefaultProjectDeprecatedResponses[keyof GetDefaultProjectDeprecatedResponses];

export type RenameDefaultProjectDeprecatedData = {
    body: RenameProjectRequest;
    path?: never;
    query?: never;
    url: '/management/v1/default-project/rename';
};

export type RenameDefaultProjectDeprecatedErrors = {
    '4XX': IcebergErrorResponse;
};

export type RenameDefaultProjectDeprecatedError = RenameDefaultProjectDeprecatedErrors[keyof RenameDefaultProjectDeprecatedErrors];

export type RenameDefaultProjectDeprecatedResponses = {
    /**
     * Project renamed successfully
     */
    200: unknown;
};

export type GetEndpointStatisticsData = {
    body: GetEndpointStatisticsRequest;
    path?: never;
    query?: never;
    url: '/management/v1/endpoint-statistics';
};

export type GetEndpointStatisticsErrors = {
    '4XX': IcebergErrorResponse;
};

export type GetEndpointStatisticsError = GetEndpointStatisticsErrors[keyof GetEndpointStatisticsErrors];

export type GetEndpointStatisticsResponses = {
    /**
     * Endpoint statistics
     */
    200: EndpointStatisticsResponse;
};

export type GetEndpointStatisticsResponse = GetEndpointStatisticsResponses[keyof GetEndpointStatisticsResponses];

export type GetServerInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/management/v1/info';
};

export type GetServerInfoErrors = {
    /**
     * Unauthorized
     */
    500: IcebergErrorResponse;
    '4XX': IcebergErrorResponse;
};

export type GetServerInfoError = GetServerInfoErrors[keyof GetServerInfoErrors];

export type GetServerInfoResponses = {
    /**
     * Server info
     */
    200: ServerInfo;
};

export type GetServerInfoResponse = GetServerInfoResponses[keyof GetServerInfoResponses];

export type CheckData = {
    body: CheckRequest;
    path?: never;
    query?: never;
    url: '/management/v1/permissions/check';
};

export type CheckResponses = {
    200: CheckResponse;
};

export type CheckResponse2 = CheckResponses[keyof CheckResponses];

export type GetNamespaceByIdData = {
    body?: never;
    path: {
        /**
         * Namespace ID
         */
        namespace_id: string;
    };
    query?: never;
    url: '/management/v1/permissions/namespace/{namespace_id}';
};

export type GetNamespaceByIdResponses = {
    200: GetNamespaceAuthPropertiesResponse;
};

export type GetNamespaceByIdResponse = GetNamespaceByIdResponses[keyof GetNamespaceByIdResponses];

export type GetNamespaceAccessByIdData = {
    body?: never;
    path: {
        /**
         * Namespace ID
         */
        namespace_id: string;
    };
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
    url: '/management/v1/permissions/namespace/{namespace_id}/access';
};

export type GetNamespaceAccessByIdResponses = {
    /**
     * Server Relations
     */
    200: GetNamespaceAccessResponse;
};

export type GetNamespaceAccessByIdResponse = GetNamespaceAccessByIdResponses[keyof GetNamespaceAccessByIdResponses];

export type GetNamespaceAssignmentsByIdData = {
    body?: never;
    path: {
        /**
         * Namespace ID
         */
        namespace_id: string;
    };
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<NamespaceRelation>;
    };
    url: '/management/v1/permissions/namespace/{namespace_id}/assignments';
};

export type GetNamespaceAssignmentsByIdResponses = {
    200: GetNamespaceAssignmentsResponse;
};

export type GetNamespaceAssignmentsByIdResponse = GetNamespaceAssignmentsByIdResponses[keyof GetNamespaceAssignmentsByIdResponses];

export type UpdateNamespaceAssignmentsByIdData = {
    body: UpdateNamespaceAssignmentsRequest;
    path: {
        /**
         * Namespace ID
         */
        namespace_id: string;
    };
    query?: never;
    url: '/management/v1/permissions/namespace/{namespace_id}/assignments';
};

export type UpdateNamespaceAssignmentsByIdResponses = {
    /**
     * Permissions updated successfully
     */
    204: void;
};

export type UpdateNamespaceAssignmentsByIdResponse = UpdateNamespaceAssignmentsByIdResponses[keyof UpdateNamespaceAssignmentsByIdResponses];

export type SetNamespaceManagedAccessData = {
    body: SetManagedAccessRequest;
    path: {
        /**
         * Namespace ID
         */
        namespace_id: string;
    };
    query?: never;
    url: '/management/v1/permissions/namespace/{namespace_id}/managed-access';
};

export type SetNamespaceManagedAccessResponses = {
    200: unknown;
};

export type GetProjectAccessData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
    url: '/management/v1/permissions/project/access';
};

export type GetProjectAccessResponses = {
    /**
     * Server Relations
     */
    200: GetProjectAccessResponse;
};

export type GetProjectAccessResponse2 = GetProjectAccessResponses[keyof GetProjectAccessResponses];

export type GetProjectAssignmentsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<ProjectRelation>;
    };
    url: '/management/v1/permissions/project/assignments';
};

export type GetProjectAssignmentsResponses = {
    200: GetProjectAssignmentsResponse;
};

export type GetProjectAssignmentsResponse2 = GetProjectAssignmentsResponses[keyof GetProjectAssignmentsResponses];

export type UpdateProjectAssignmentsData = {
    body: UpdateProjectAssignmentsRequest;
    path?: never;
    query?: never;
    url: '/management/v1/permissions/project/assignments';
};

export type UpdateProjectAssignmentsResponses = {
    /**
     * Permissions updated successfully
     */
    204: void;
};

export type UpdateProjectAssignmentsResponse = UpdateProjectAssignmentsResponses[keyof UpdateProjectAssignmentsResponses];

export type GetProjectAccessByIdData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        project_id: string;
    };
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
    url: '/management/v1/permissions/project/{project_id}/access';
};

export type GetProjectAccessByIdResponses = {
    /**
     * Server Relations
     */
    200: GetProjectAccessResponse;
};

export type GetProjectAccessByIdResponse = GetProjectAccessByIdResponses[keyof GetProjectAccessByIdResponses];

export type GetProjectAssignmentsByIdData = {
    body?: never;
    path: {
        /**
         * Project ID
         */
        project_id: string;
    };
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<ProjectRelation>;
    };
    url: '/management/v1/permissions/project/{project_id}/assignments';
};

export type GetProjectAssignmentsByIdResponses = {
    200: GetProjectAssignmentsResponse;
};

export type GetProjectAssignmentsByIdResponse = GetProjectAssignmentsByIdResponses[keyof GetProjectAssignmentsByIdResponses];

export type UpdateProjectAssignmentsByIdData = {
    body: UpdateProjectAssignmentsRequest;
    path: {
        /**
         * Project ID
         */
        project_id: string;
    };
    query?: never;
    url: '/management/v1/permissions/project/{project_id}/assignments';
};

export type UpdateProjectAssignmentsByIdResponses = {
    /**
     * Permissions updated successfully
     */
    204: void;
};

export type UpdateProjectAssignmentsByIdResponse = UpdateProjectAssignmentsByIdResponses[keyof UpdateProjectAssignmentsByIdResponses];

export type GetRoleAccessByIdData = {
    body?: never;
    path: {
        /**
         * Role ID
         */
        role_id: string;
    };
    query?: never;
    url: '/management/v1/permissions/role/{role_id}/access';
};

export type GetRoleAccessByIdResponses = {
    200: GetRoleAccessResponse;
};

export type GetRoleAccessByIdResponse = GetRoleAccessByIdResponses[keyof GetRoleAccessByIdResponses];

export type GetRoleAssignmentsByIdData = {
    body?: never;
    path: {
        /**
         * Role ID
         */
        role_id: string;
    };
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<RoleRelation>;
    };
    url: '/management/v1/permissions/role/{role_id}/assignments';
};

export type GetRoleAssignmentsByIdResponses = {
    200: GetRoleAssignmentsResponse;
};

export type GetRoleAssignmentsByIdResponse = GetRoleAssignmentsByIdResponses[keyof GetRoleAssignmentsByIdResponses];

export type UpdateRoleAssignmentsByIdData = {
    body: UpdateRoleAssignmentsRequest;
    path: {
        /**
         * Role ID
         */
        role_id: string;
    };
    query?: never;
    url: '/management/v1/permissions/role/{role_id}/assignments';
};

export type UpdateRoleAssignmentsByIdResponses = {
    /**
     * Permissions updated successfully
     */
    204: void;
};

export type UpdateRoleAssignmentsByIdResponse = UpdateRoleAssignmentsByIdResponses[keyof UpdateRoleAssignmentsByIdResponses];

export type GetServerAccessData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
    url: '/management/v1/permissions/server/access';
};

export type GetServerAccessResponses = {
    /**
     * Server Access
     */
    200: GetServerAccessResponse;
};

export type GetServerAccessResponse2 = GetServerAccessResponses[keyof GetServerAccessResponses];

export type GetServerAssignmentsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<ServerRelation>;
    };
    url: '/management/v1/permissions/server/assignments';
};

export type GetServerAssignmentsResponses = {
    200: GetServerAssignmentsResponse;
};

export type GetServerAssignmentsResponse2 = GetServerAssignmentsResponses[keyof GetServerAssignmentsResponses];

export type UpdateServerAssignmentsData = {
    body: UpdateServerAssignmentsRequest;
    path?: never;
    query?: never;
    url: '/management/v1/permissions/server/assignments';
};

export type UpdateServerAssignmentsResponses = {
    /**
     * Permissions updated successfully
     */
    204: void;
};

export type UpdateServerAssignmentsResponse = UpdateServerAssignmentsResponses[keyof UpdateServerAssignmentsResponses];

export type GetTableAccessByIdData = {
    body?: never;
    path: {
        /**
         * Table ID
         */
        table_id: string;
    };
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
    url: '/management/v1/permissions/table/{table_id}/access';
};

export type GetTableAccessByIdResponses = {
    /**
     * Server Relations
     */
    200: GetTableAccessResponse;
};

export type GetTableAccessByIdResponse = GetTableAccessByIdResponses[keyof GetTableAccessByIdResponses];

export type GetTableAssignmentsByIdData = {
    body?: never;
    path: {
        /**
         * Table ID
         */
        table_id: string;
    };
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<TableRelation>;
    };
    url: '/management/v1/permissions/table/{table_id}/assignments';
};

export type GetTableAssignmentsByIdResponses = {
    200: GetTableAssignmentsResponse;
};

export type GetTableAssignmentsByIdResponse = GetTableAssignmentsByIdResponses[keyof GetTableAssignmentsByIdResponses];

export type UpdateTableAssignmentsByIdData = {
    body: UpdateTableAssignmentsRequest;
    path: {
        /**
         * Table ID
         */
        table_id: string;
    };
    query?: never;
    url: '/management/v1/permissions/table/{table_id}/assignments';
};

export type UpdateTableAssignmentsByIdResponses = {
    /**
     * Permissions updated successfully
     */
    204: void;
};

export type UpdateTableAssignmentsByIdResponse = UpdateTableAssignmentsByIdResponses[keyof UpdateTableAssignmentsByIdResponses];

export type GetViewAccessByIdData = {
    body?: never;
    path: {
        /**
         * View ID
         */
        view_id: string;
    };
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
    url: '/management/v1/permissions/view/{view_id}/access';
};

export type GetViewAccessByIdResponses = {
    200: GetViewAccessResponse;
};

export type GetViewAccessByIdResponse = GetViewAccessByIdResponses[keyof GetViewAccessByIdResponses];

export type GetViewAssignmentsByIdData = {
    body?: never;
    path: {
        /**
         * View ID
         */
        view_id: string;
    };
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<ViewRelation>;
    };
    url: '/management/v1/permissions/view/{view_id}/assignments';
};

export type GetViewAssignmentsByIdResponses = {
    200: GetViewAssignmentsResponse;
};

export type GetViewAssignmentsByIdResponse = GetViewAssignmentsByIdResponses[keyof GetViewAssignmentsByIdResponses];

export type UpdateViewAssignmentsByIdData = {
    body: UpdateViewAssignmentsRequest;
    path: {
        /**
         * View ID
         */
        view_id: string;
    };
    query?: never;
    url: '/management/v1/permissions/view/{view_id}/assignments';
};

export type UpdateViewAssignmentsByIdResponses = {
    /**
     * Permissions updated successfully
     */
    204: void;
};

export type UpdateViewAssignmentsByIdResponse = UpdateViewAssignmentsByIdResponses[keyof UpdateViewAssignmentsByIdResponses];

export type GetWarehouseByIdData = {
    body?: never;
    path: {
        /**
         * Warehouse ID
         */
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/permissions/warehouse/{warehouse_id}';
};

export type GetWarehouseByIdResponses = {
    200: GetWarehouseAuthPropertiesResponse;
};

export type GetWarehouseByIdResponse = GetWarehouseByIdResponses[keyof GetWarehouseByIdResponses];

export type GetWarehouseAccessByIdData = {
    body?: never;
    path: {
        /**
         * Warehouse ID
         */
        warehouse_id: string;
    };
    query?: {
        /**
         * The user or role to show access for.
         * If not specified, shows access for the current user.
         */
        principal?: UserOrRole;
    };
    url: '/management/v1/permissions/warehouse/{warehouse_id}/access';
};

export type GetWarehouseAccessByIdResponses = {
    200: GetWarehouseAccessResponse;
};

export type GetWarehouseAccessByIdResponse = GetWarehouseAccessByIdResponses[keyof GetWarehouseAccessByIdResponses];

export type GetWarehouseAssignmentsByIdData = {
    body?: never;
    path: {
        /**
         * Warehouse ID
         */
        warehouse_id: string;
    };
    query?: {
        /**
         * Relations to be loaded. If not specified, all relations are returned.
         */
        relations?: Array<WarehouseRelation>;
    };
    url: '/management/v1/permissions/warehouse/{warehouse_id}/assignments';
};

export type GetWarehouseAssignmentsByIdResponses = {
    200: GetWarehouseAssignmentsResponse;
};

export type GetWarehouseAssignmentsByIdResponse = GetWarehouseAssignmentsByIdResponses[keyof GetWarehouseAssignmentsByIdResponses];

export type UpdateWarehouseAssignmentsByIdData = {
    body: UpdateWarehouseAssignmentsRequest;
    path: {
        /**
         * Warehouse ID
         */
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/permissions/warehouse/{warehouse_id}/assignments';
};

export type UpdateWarehouseAssignmentsByIdResponses = {
    /**
     * Permissions updated successfully
     */
    204: void;
};

export type UpdateWarehouseAssignmentsByIdResponse = UpdateWarehouseAssignmentsByIdResponses[keyof UpdateWarehouseAssignmentsByIdResponses];

export type SetWarehouseManagedAccessData = {
    body: SetManagedAccessRequest;
    path: {
        /**
         * Warehouse ID
         */
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/permissions/warehouse/{warehouse_id}/managed-access';
};

export type SetWarehouseManagedAccessResponses = {
    200: unknown;
};

export type DeleteDefaultProjectData = {
    body?: never;
    headers: {
        /**
         * Optional project ID
         */
        'x-project-id': string;
    };
    path?: never;
    query?: never;
    url: '/management/v1/project';
};

export type DeleteDefaultProjectErrors = {
    '4XX': IcebergErrorResponse;
};

export type DeleteDefaultProjectError = DeleteDefaultProjectErrors[keyof DeleteDefaultProjectErrors];

export type DeleteDefaultProjectResponses = {
    /**
     * Project deleted successfully
     */
    204: void;
};

export type DeleteDefaultProjectResponse = DeleteDefaultProjectResponses[keyof DeleteDefaultProjectResponses];

export type GetDefaultProjectData = {
    body?: never;
    headers: {
        /**
         * Optional project ID
         */
        'x-project-id': string;
    };
    path?: never;
    query?: never;
    url: '/management/v1/project';
};

export type GetDefaultProjectErrors = {
    '4XX': IcebergErrorResponse;
};

export type GetDefaultProjectError = GetDefaultProjectErrors[keyof GetDefaultProjectErrors];

export type GetDefaultProjectResponses = {
    /**
     * Project details
     */
    200: GetProjectResponse;
};

export type GetDefaultProjectResponse = GetDefaultProjectResponses[keyof GetDefaultProjectResponses];

export type CreateProjectData = {
    body: CreateProjectRequest;
    path?: never;
    query?: never;
    url: '/management/v1/project';
};

export type CreateProjectErrors = {
    '4XX': IcebergErrorResponse;
};

export type CreateProjectError = CreateProjectErrors[keyof CreateProjectErrors];

export type CreateProjectResponses = {
    /**
     * Project created successfully
     */
    201: CreateProjectResponse;
};

export type CreateProjectResponse2 = CreateProjectResponses[keyof CreateProjectResponses];

export type ListProjectsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/management/v1/project-list';
};

export type ListProjectsErrors = {
    '4XX': IcebergErrorResponse;
};

export type ListProjectsError = ListProjectsErrors[keyof ListProjectsErrors];

export type ListProjectsResponses = {
    /**
     * List of projects
     */
    200: ListProjectsResponse;
};

export type ListProjectsResponse2 = ListProjectsResponses[keyof ListProjectsResponses];

export type RenameDefaultProjectData = {
    body: RenameProjectRequest;
    headers: {
        /**
         * Optional project ID
         */
        'x-project-id': string;
    };
    path?: never;
    query?: never;
    url: '/management/v1/project/rename';
};

export type RenameDefaultProjectErrors = {
    '4XX': IcebergErrorResponse;
};

export type RenameDefaultProjectError = RenameDefaultProjectErrors[keyof RenameDefaultProjectErrors];

export type RenameDefaultProjectResponses = {
    /**
     * Project renamed successfully
     */
    200: unknown;
};

export type DeleteProjectByIdData = {
    body?: never;
    path: {
        project_id: string;
    };
    query?: never;
    url: '/management/v1/project/{project_id}';
};

export type DeleteProjectByIdErrors = {
    '4XX': IcebergErrorResponse;
};

export type DeleteProjectByIdError = DeleteProjectByIdErrors[keyof DeleteProjectByIdErrors];

export type DeleteProjectByIdResponses = {
    /**
     * Project deleted successfully
     */
    204: void;
};

export type DeleteProjectByIdResponse = DeleteProjectByIdResponses[keyof DeleteProjectByIdResponses];

export type GetProjectByIdData = {
    body?: never;
    path: {
        project_id: string;
    };
    query?: never;
    url: '/management/v1/project/{project_id}';
};

export type GetProjectByIdErrors = {
    '4XX': IcebergErrorResponse;
};

export type GetProjectByIdError = GetProjectByIdErrors[keyof GetProjectByIdErrors];

export type GetProjectByIdResponses = {
    /**
     * Project details
     */
    200: GetProjectResponse;
};

export type GetProjectByIdResponse = GetProjectByIdResponses[keyof GetProjectByIdResponses];

export type RenameProjectByIdData = {
    body: RenameProjectRequest;
    path: {
        project_id: string;
    };
    query?: never;
    url: '/management/v1/project/{project_id}/rename';
};

export type RenameProjectByIdErrors = {
    '4XX': IcebergErrorResponse;
};

export type RenameProjectByIdError = RenameProjectByIdErrors[keyof RenameProjectByIdErrors];

export type RenameProjectByIdResponses = {
    /**
     * Project renamed successfully
     */
    200: unknown;
};

export type ListRolesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search for a specific role name
         */
        name?: string | null;
        /**
         * Next page token
         */
        pageToken?: string | null;
        /**
         * Signals an upper bound of the number of results that a client will receive.
         * Default: 100
         */
        pageSize?: number;
        /**
         * Project ID from which roles should be listed
         * Deprecated: Please use the `x-project-id` header instead.
         */
        projectId?: string | null;
    };
    url: '/management/v1/role';
};

export type ListRolesErrors = {
    '4XX': IcebergErrorResponse;
};

export type ListRolesError = ListRolesErrors[keyof ListRolesErrors];

export type ListRolesResponses = {
    /**
     * List of roles
     */
    200: ListRolesResponse;
};

export type ListRolesResponse2 = ListRolesResponses[keyof ListRolesResponses];

export type CreateRoleData = {
    body: CreateRoleRequest;
    path?: never;
    query?: never;
    url: '/management/v1/role';
};

export type CreateRoleErrors = {
    '4XX': IcebergErrorResponse;
};

export type CreateRoleError = CreateRoleErrors[keyof CreateRoleErrors];

export type CreateRoleResponses = {
    /**
     * Role successfully created
     */
    201: Role;
};

export type CreateRoleResponse = CreateRoleResponses[keyof CreateRoleResponses];

export type DeleteRoleData = {
    body?: never;
    path: {
        role_id: string;
    };
    query?: never;
    url: '/management/v1/role/{role_id}';
};

export type DeleteRoleErrors = {
    '4XX': IcebergErrorResponse;
};

export type DeleteRoleError = DeleteRoleErrors[keyof DeleteRoleErrors];

export type DeleteRoleResponses = {
    /**
     * Role deleted successfully
     */
    204: void;
};

export type DeleteRoleResponse = DeleteRoleResponses[keyof DeleteRoleResponses];

export type GetRoleData = {
    body?: never;
    path: {
        role_id: string;
    };
    query?: never;
    url: '/management/v1/role/{role_id}';
};

export type GetRoleErrors = {
    '4XX': IcebergErrorResponse;
};

export type GetRoleError = GetRoleErrors[keyof GetRoleErrors];

export type GetRoleResponses = {
    /**
     * Role details
     */
    200: Role;
};

export type GetRoleResponse = GetRoleResponses[keyof GetRoleResponses];

export type UpdateRoleData = {
    body: UpdateRoleRequest;
    path: {
        role_id: string;
    };
    query?: never;
    url: '/management/v1/role/{role_id}';
};

export type UpdateRoleErrors = {
    '4XX': IcebergErrorResponse;
};

export type UpdateRoleError = UpdateRoleErrors[keyof UpdateRoleErrors];

export type UpdateRoleResponses = {
    /**
     * Role updated successfully
     */
    200: Role;
};

export type UpdateRoleResponse = UpdateRoleResponses[keyof UpdateRoleResponses];

export type SearchRoleData = {
    body: SearchRoleRequest;
    path?: never;
    query?: never;
    url: '/management/v1/search/role';
};

export type SearchRoleErrors = {
    '4XX': IcebergErrorResponse;
};

export type SearchRoleError = SearchRoleErrors[keyof SearchRoleErrors];

export type SearchRoleResponses = {
    /**
     * List of users
     */
    200: SearchRoleResponse;
};

export type SearchRoleResponse2 = SearchRoleResponses[keyof SearchRoleResponses];

export type SearchUserData = {
    body: SearchUserRequest;
    path?: never;
    query?: never;
    url: '/management/v1/search/user';
};

export type SearchUserErrors = {
    '4XX': IcebergErrorResponse;
};

export type SearchUserError = SearchUserErrors[keyof SearchUserErrors];

export type SearchUserResponses = {
    /**
     * List of users
     */
    200: SearchUserResponse;
};

export type SearchUserResponse2 = SearchUserResponses[keyof SearchUserResponses];

export type ListUserData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Search for a specific username
         */
        name?: string | null;
        /**
         * Next page token
         */
        pageToken?: string | null;
        /**
         * Signals an upper bound of the number of results that a client will receive.
         * Default: 100
         */
        pageSize?: number;
    };
    url: '/management/v1/user';
};

export type ListUserErrors = {
    '4XX': IcebergErrorResponse;
};

export type ListUserError = ListUserErrors[keyof ListUserErrors];

export type ListUserResponses = {
    /**
     * List of users
     */
    200: ListUsersResponse;
};

export type ListUserResponse = ListUserResponses[keyof ListUserResponses];

export type CreateUserData = {
    body: CreateUserRequest;
    path?: never;
    query?: never;
    url: '/management/v1/user';
};

export type CreateUserErrors = {
    '4XX': IcebergErrorResponse;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * User updated
     */
    200: User;
    /**
     * User created
     */
    201: User;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/management/v1/user/{user_id}';
};

export type DeleteUserErrors = {
    '4XX': IcebergErrorResponse;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
    /**
     * User deleted successfully
     */
    204: void;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserData = {
    body?: never;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/management/v1/user/{user_id}';
};

export type GetUserErrors = {
    '4XX': IcebergErrorResponse;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
    /**
     * User details
     */
    200: User;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
    body: UpdateUserRequest;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/management/v1/user/{user_id}';
};

export type UpdateUserErrors = {
    '4XX': IcebergErrorResponse;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
    /**
     * User details updated successfully
     */
    200: unknown;
};

export type ListWarehousesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Optional filter to return only warehouses
         * with the specified status.
         * If not provided, only active warehouses are returned.
         */
        warehouseStatus?: Array<WarehouseStatus>;
        /**
         * The project ID to list warehouses for.
         * Deprecated: Please use the `x-project-id` header instead.
         */
        projectId?: string | null;
    };
    url: '/management/v1/warehouse';
};

export type ListWarehousesErrors = {
    '4XX': IcebergErrorResponse;
};

export type ListWarehousesError = ListWarehousesErrors[keyof ListWarehousesErrors];

export type ListWarehousesResponses = {
    /**
     * List of warehouses
     */
    200: ListWarehousesResponse;
};

export type ListWarehousesResponse2 = ListWarehousesResponses[keyof ListWarehousesResponses];

export type CreateWarehouseData = {
    body: CreateWarehouseRequest;
    path?: never;
    query?: never;
    url: '/management/v1/warehouse';
};

export type CreateWarehouseErrors = {
    '4XX': IcebergErrorResponse;
};

export type CreateWarehouseError = CreateWarehouseErrors[keyof CreateWarehouseErrors];

export type CreateWarehouseResponses = {
    /**
     * Warehouse created successfully
     */
    201: CreateWarehouseResponse;
};

export type CreateWarehouseResponse2 = CreateWarehouseResponses[keyof CreateWarehouseResponses];

export type DeleteWarehouseData = {
    body?: never;
    path: {
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}';
};

export type DeleteWarehouseErrors = {
    '4XX': IcebergErrorResponse;
};

export type DeleteWarehouseError = DeleteWarehouseErrors[keyof DeleteWarehouseErrors];

export type DeleteWarehouseResponses = {
    /**
     * Warehouse deleted successfully
     */
    204: void;
};

export type DeleteWarehouseResponse = DeleteWarehouseResponses[keyof DeleteWarehouseResponses];

export type GetWarehouseData = {
    body?: never;
    path: {
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}';
};

export type GetWarehouseErrors = {
    '4XX': IcebergErrorResponse;
};

export type GetWarehouseError = GetWarehouseErrors[keyof GetWarehouseErrors];

export type GetWarehouseResponses = {
    /**
     * Warehouse details
     */
    200: GetWarehouseResponse;
};

export type GetWarehouseResponse2 = GetWarehouseResponses[keyof GetWarehouseResponses];

export type ActivateWarehouseData = {
    body?: never;
    path: {
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/activate';
};

export type ActivateWarehouseErrors = {
    '4XX': IcebergErrorResponse;
};

export type ActivateWarehouseError = ActivateWarehouseErrors[keyof ActivateWarehouseErrors];

export type ActivateWarehouseResponses = {
    /**
     * Warehouse activated successfully
     */
    200: unknown;
};

export type DeactivateWarehouseData = {
    body?: never;
    path: {
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/deactivate';
};

export type DeactivateWarehouseErrors = {
    '4XX': IcebergErrorResponse;
};

export type DeactivateWarehouseError = DeactivateWarehouseErrors[keyof DeactivateWarehouseErrors];

export type DeactivateWarehouseResponses = {
    /**
     * Warehouse deactivated successfully
     */
    200: unknown;
};

export type UpdateWarehouseDeleteProfileData = {
    body: UpdateWarehouseDeleteProfileRequest;
    path: {
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/delete-profile';
};

export type UpdateWarehouseDeleteProfileErrors = {
    '4XX': IcebergErrorResponse;
};

export type UpdateWarehouseDeleteProfileError = UpdateWarehouseDeleteProfileErrors[keyof UpdateWarehouseDeleteProfileErrors];

export type UpdateWarehouseDeleteProfileResponses = {
    /**
     * Deletion Profile updated successfully
     */
    200: unknown;
};

export type ListDeletedTabularsData = {
    body?: never;
    path: {
        warehouse_id: string;
    };
    query?: {
        /**
         * Filter by Namespace ID
         */
        namespaceId?: string;
        /**
         * Next page token
         */
        pageToken?: string | null;
        /**
         * Signals an upper bound of the number of results that a client will receive.
         * Default: 100
         */
        pageSize?: number;
    };
    url: '/management/v1/warehouse/{warehouse_id}/deleted-tabulars';
};

export type ListDeletedTabularsErrors = {
    '4XX': IcebergErrorResponse;
};

export type ListDeletedTabularsError = ListDeletedTabularsErrors[keyof ListDeletedTabularsErrors];

export type ListDeletedTabularsResponses = {
    /**
     * List of soft-deleted tabulars
     */
    200: ListDeletedTabularsResponse;
};

export type ListDeletedTabularsResponse2 = ListDeletedTabularsResponses[keyof ListDeletedTabularsResponses];

export type UndropTabularsData = {
    body: UndropTabularsRequest;
    path: {
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/deleted-tabulars/undrop';
};

export type UndropTabularsErrors = {
    '4XX': IcebergErrorResponse;
};

export type UndropTabularsError = UndropTabularsErrors[keyof UndropTabularsErrors];

export type UndropTabularsResponses = {
    /**
     * Tabular undropped successfully
     */
    204: void;
};

export type UndropTabularsResponse = UndropTabularsResponses[keyof UndropTabularsResponses];

export type UndropTabularsDeprecatedData = {
    body: UndropTabularsRequest;
    path: {
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/deleted_tabulars/undrop';
};

export type UndropTabularsDeprecatedErrors = {
    '4XX': IcebergErrorResponse;
};

export type UndropTabularsDeprecatedError = UndropTabularsDeprecatedErrors[keyof UndropTabularsDeprecatedErrors];

export type UndropTabularsDeprecatedResponses = {
    /**
     * Tabular undropped successfully
     */
    204: void;
};

export type UndropTabularsDeprecatedResponse = UndropTabularsDeprecatedResponses[keyof UndropTabularsDeprecatedResponses];

export type GetNamespaceProtectionData = {
    body?: never;
    path: {
        warehouse_id: string;
        namespace_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/namespace/{namespace_id}/protection';
};

export type GetNamespaceProtectionErrors = {
    '4XX': IcebergErrorResponse;
};

export type GetNamespaceProtectionError = GetNamespaceProtectionErrors[keyof GetNamespaceProtectionErrors];

export type GetNamespaceProtectionResponses = {
    200: ProtectionResponse;
};

export type GetNamespaceProtectionResponse = GetNamespaceProtectionResponses[keyof GetNamespaceProtectionResponses];

export type SetNamespaceProtectionData = {
    body: SetProtectionRequest;
    path: {
        warehouse_id: string;
        namespace_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/namespace/{namespace_id}/protection';
};

export type SetNamespaceProtectionErrors = {
    '4XX': IcebergErrorResponse;
};

export type SetNamespaceProtectionError = SetNamespaceProtectionErrors[keyof SetNamespaceProtectionErrors];

export type SetNamespaceProtectionResponses = {
    /**
     * Namespace protection set successfully
     */
    200: ProtectionResponse;
};

export type SetNamespaceProtectionResponse = SetNamespaceProtectionResponses[keyof SetNamespaceProtectionResponses];

export type SetWarehouseProtectionData = {
    body: SetProtectionRequest;
    path: {
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/protection';
};

export type SetWarehouseProtectionErrors = {
    '4XX': IcebergErrorResponse;
};

export type SetWarehouseProtectionError = SetWarehouseProtectionErrors[keyof SetWarehouseProtectionErrors];

export type SetWarehouseProtectionResponses = {
    /**
     * Warehouse protection set successfully
     */
    200: ProtectionResponse;
};

export type SetWarehouseProtectionResponse = SetWarehouseProtectionResponses[keyof SetWarehouseProtectionResponses];

export type RenameWarehouseData = {
    body: RenameWarehouseRequest;
    path: {
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/rename';
};

export type RenameWarehouseErrors = {
    '4XX': IcebergErrorResponse;
};

export type RenameWarehouseError = RenameWarehouseErrors[keyof RenameWarehouseErrors];

export type RenameWarehouseResponses = {
    /**
     * Warehouse renamed successfully
     */
    200: unknown;
};

export type GetWarehouseStatisticsData = {
    body?: never;
    path: {
        warehouse_id: string;
    };
    query?: {
        /**
         * Next page token
         */
        page_token?: string;
        /**
         * Signals an upper bound of the number of results that a client will receive.
         */
        page_size?: number | null;
    };
    url: '/management/v1/warehouse/{warehouse_id}/statistics';
};

export type GetWarehouseStatisticsErrors = {
    '4XX': IcebergErrorResponse;
};

export type GetWarehouseStatisticsError = GetWarehouseStatisticsErrors[keyof GetWarehouseStatisticsErrors];

export type GetWarehouseStatisticsResponses = {
    /**
     * Warehouse statistics
     */
    200: WarehouseStatisticsResponse;
};

export type GetWarehouseStatisticsResponse = GetWarehouseStatisticsResponses[keyof GetWarehouseStatisticsResponses];

export type UpdateStorageProfileData = {
    body: UpdateWarehouseStorageRequest;
    path: {
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/storage';
};

export type UpdateStorageProfileErrors = {
    '4XX': IcebergErrorResponse;
};

export type UpdateStorageProfileError = UpdateStorageProfileErrors[keyof UpdateStorageProfileErrors];

export type UpdateStorageProfileResponses = {
    /**
     * Storage profile updated successfully
     */
    200: unknown;
};

export type UpdateStorageCredentialData = {
    body: UpdateWarehouseCredentialRequest;
    path: {
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/storage-credential';
};

export type UpdateStorageCredentialErrors = {
    '4XX': IcebergErrorResponse;
};

export type UpdateStorageCredentialError = UpdateStorageCredentialErrors[keyof UpdateStorageCredentialErrors];

export type UpdateStorageCredentialResponses = {
    /**
     * Storage credential updated successfully
     */
    200: unknown;
};

export type GetTableProtectionData = {
    body?: never;
    path: {
        warehouse_id: string;
        table_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/table/{table_id}/protection';
};

export type GetTableProtectionErrors = {
    '4XX': IcebergErrorResponse;
};

export type GetTableProtectionError = GetTableProtectionErrors[keyof GetTableProtectionErrors];

export type GetTableProtectionResponses = {
    200: ProtectionResponse;
};

export type GetTableProtectionResponse = GetTableProtectionResponses[keyof GetTableProtectionResponses];

export type SetTableProtectionData = {
    body: SetProtectionRequest;
    path: {
        warehouse_id: string;
        table_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/table/{table_id}/protection';
};

export type SetTableProtectionErrors = {
    '4XX': IcebergErrorResponse;
};

export type SetTableProtectionError = SetTableProtectionErrors[keyof SetTableProtectionErrors];

export type SetTableProtectionResponses = {
    /**
     * Table protection set successfully
     */
    200: ProtectionResponse;
};

export type SetTableProtectionResponse = SetTableProtectionResponses[keyof SetTableProtectionResponses];

export type GetViewProtectionData = {
    body?: never;
    path: {
        warehouse_id: string;
        view_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/view/{view_id}/protection';
};

export type GetViewProtectionErrors = {
    '4XX': IcebergErrorResponse;
};

export type GetViewProtectionError = GetViewProtectionErrors[keyof GetViewProtectionErrors];

export type GetViewProtectionResponses = {
    200: ProtectionResponse;
};

export type GetViewProtectionResponse = GetViewProtectionResponses[keyof GetViewProtectionResponses];

export type SetViewProtectionData = {
    body: SetProtectionRequest;
    path: {
        warehouse_id: string;
        view_id: string;
    };
    query?: never;
    url: '/management/v1/warehouse/{warehouse_id}/view/{view_id}/protection';
};

export type SetViewProtectionErrors = {
    '4XX': IcebergErrorResponse;
};

export type SetViewProtectionError = SetViewProtectionErrors[keyof SetViewProtectionErrors];

export type SetViewProtectionResponses = {
    /**
     * View protection set successfully
     */
    200: ProtectionResponse;
};

export type SetViewProtectionResponse = SetViewProtectionResponses[keyof SetViewProtectionResponses];

export type WhoamiData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/management/v1/whoami';
};

export type WhoamiErrors = {
    '4XX': IcebergErrorResponse;
};

export type WhoamiError = WhoamiErrors[keyof WhoamiErrors];

export type WhoamiResponses = {
    /**
     * User details
     */
    200: User;
};

export type WhoamiResponse = WhoamiResponses[keyof WhoamiResponses];

export type GetTaskQueueConfigTabularExpirationData = {
    body?: never;
    path: {
        warehouse_id: string;
        queue_name: string;
    };
    query?: never;
    url: '/management/v1/{warehouse_id}/task-queue/tabular_expiration/config';
};

export type GetTaskQueueConfigTabularExpirationErrors = {
    '4XX': IcebergErrorResponse;
};

export type GetTaskQueueConfigTabularExpirationError = GetTaskQueueConfigTabularExpirationErrors[keyof GetTaskQueueConfigTabularExpirationErrors];

export type GetTaskQueueConfigTabularExpirationResponses = {
    200: ExpirationQueueConfig;
};

export type GetTaskQueueConfigTabularExpirationResponse = GetTaskQueueConfigTabularExpirationResponses[keyof GetTaskQueueConfigTabularExpirationResponses];

export type SetTaskQueueConfigTabularExpirationData = {
    body: ExpirationQueueConfig;
    path: {
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/{warehouse_id}/task-queue/tabular_expiration/config';
};

export type SetTaskQueueConfigTabularExpirationErrors = {
    '4XX': IcebergErrorResponse;
};

export type SetTaskQueueConfigTabularExpirationError = SetTaskQueueConfigTabularExpirationErrors[keyof SetTaskQueueConfigTabularExpirationErrors];

export type SetTaskQueueConfigTabularExpirationResponses = {
    /**
     * Task queue config set successfully
     */
    204: void;
};

export type SetTaskQueueConfigTabularExpirationResponse = SetTaskQueueConfigTabularExpirationResponses[keyof SetTaskQueueConfigTabularExpirationResponses];

export type GetTaskQueueConfigTabularPurgeData = {
    body?: never;
    path: {
        warehouse_id: string;
        queue_name: string;
    };
    query?: never;
    url: '/management/v1/{warehouse_id}/task-queue/tabular_purge/config';
};

export type GetTaskQueueConfigTabularPurgeErrors = {
    '4XX': IcebergErrorResponse;
};

export type GetTaskQueueConfigTabularPurgeError = GetTaskQueueConfigTabularPurgeErrors[keyof GetTaskQueueConfigTabularPurgeErrors];

export type GetTaskQueueConfigTabularPurgeResponses = {
    200: PurgeQueueConfig;
};

export type GetTaskQueueConfigTabularPurgeResponse = GetTaskQueueConfigTabularPurgeResponses[keyof GetTaskQueueConfigTabularPurgeResponses];

export type SetTaskQueueConfigTabularPurgeData = {
    body: PurgeQueueConfig;
    path: {
        warehouse_id: string;
    };
    query?: never;
    url: '/management/v1/{warehouse_id}/task-queue/tabular_purge/config';
};

export type SetTaskQueueConfigTabularPurgeErrors = {
    '4XX': IcebergErrorResponse;
};

export type SetTaskQueueConfigTabularPurgeError = SetTaskQueueConfigTabularPurgeErrors[keyof SetTaskQueueConfigTabularPurgeErrors];

export type SetTaskQueueConfigTabularPurgeResponses = {
    /**
     * Task queue config set successfully
     */
    204: void;
};

export type SetTaskQueueConfigTabularPurgeResponse = SetTaskQueueConfigTabularPurgeResponses[keyof SetTaskQueueConfigTabularPurgeResponses];

export type ClientOptions = {
    baseUrl: '{scheme}://{host}/{basePath}' | (string & {});
};